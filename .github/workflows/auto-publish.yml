name: Auto Build & Publish on Submodule Update

on:
  push:
    branches: [main]
  schedule:
    # Check for submodule updates daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: write
  id-token: write

jobs:
  check-submodule:
    runs-on: ubuntu-latest
    outputs:
      should-publish: ${{ steps.check.outputs.should-publish }}
      astro-version: ${{ steps.check.outputs.astro-version }}
      new-version: ${{ steps.check.outputs.new-version }}
    steps:
      - name: Checkout with submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Check submodule changes and version
        id: check
        run: |
          # Get our repo's latest commit hash
          OUR_COMMIT=$(git rev-parse HEAD | cut -c1-7)
          echo "Our repo commit: $OUR_COMMIT"
          
          # Get Astro version from submodule package.json
          cd astro-upstream
          git fetch --tags
          LATEST_ASTRO_TAG=$(git tag -l "astro@*" | sort -V | tail -1)
          echo "Latest Astro tag: $LATEST_ASTRO_TAG"
          git checkout "$LATEST_ASTRO_TAG"
          ASTRO_VERSION=$(node -p "require('./package.json').version")
          echo "Astro version: $ASTRO_VERSION"
          cd ..
          
          # Generate new version: Astro version + our commit hash
          NEW_VERSION="${ASTRO_VERSION}-${OUR_COMMIT}"
          echo "Proposed new version: $NEW_VERSION"
          
          # Check if this version tag already exists
          if git tag --list | grep -q "^v${NEW_VERSION}$"; then
            echo "Version v$NEW_VERSION already exists, skipping publish"
            echo "should-publish=false" >> $GITHUB_OUTPUT
          else
            echo "New version v$NEW_VERSION, will publish"
            echo "should-publish=true" >> $GITHUB_OUTPUT
          fi
          
          echo "astro-version=$ASTRO_VERSION" >> $GITHUB_OUTPUT
          echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT

  build-and-publish:
    needs: check-submodule
    if: needs.check-submodule.outputs.should-publish == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout with submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          registry-url: 'https://registry.npmjs.org'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_SECRET }}

      - name: Initialize submodule and update to latest Astro tag
        run: |
          git submodule update --init --recursive
          cd astro-upstream
          git fetch --tags
          # Get the latest astro@* tag and checkout to it
          LATEST_ASTRO_TAG=$(git tag -l "astro@*" | sort -V | tail -1)
          echo "Updating to latest Astro tag: $LATEST_ASTRO_TAG"
          git checkout "$LATEST_ASTRO_TAG"
          cd ..
          # Install dependencies but exclude our generated packages
          pnpm install --ignore-scripts --filter='!zastro-websockets-node' --filter='!zastro-websockets-cloudflare'

      - name: Build and test adapters
        run: |
          echo "Building adapters with dynamic build system..."
          pnpm run build
          
          echo "Testing both adapters..."
          pnpm run test

# Version handling is done in the packages themselves, not root package.json

      - name: Final build
        run: |
          pnpm run build

      - name: Update package versions
        run: |
          NEW_VERSION="${{ needs.check-submodule.outputs.new-version }}"
          echo "Updating package versions to $NEW_VERSION"
          
          # Update node package version (directly edit JSON, no npm install)
          if [ -f packages/node/package.json ]; then
            node -e "
              const pkg = JSON.parse(require('fs').readFileSync('packages/node/package.json', 'utf8'));
              pkg.version = '$NEW_VERSION';
              require('fs').writeFileSync('packages/node/package.json', JSON.stringify(pkg, null, 2) + '\n');
              console.log('Updated packages/node/package.json to version $NEW_VERSION');
            "
          fi
          
          # Update cloudflare package version (directly edit JSON, no npm install)
          if [ -f packages/cloudflare/package.json ]; then
            node -e "
              const pkg = JSON.parse(require('fs').readFileSync('packages/cloudflare/package.json', 'utf8'));
              pkg.version = '$NEW_VERSION';
              require('fs').writeFileSync('packages/cloudflare/package.json', JSON.stringify(pkg, null, 2) + '\n');
              console.log('Updated packages/cloudflare/package.json to version $NEW_VERSION');
            "
          fi

      - name: Publish packages to npm
        run: pnpm run publish:packages
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_SECRET }}

      - name: Commit built packages (after successful publish)
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Only commit the built packages folder, not version bumps
          git add packages/
          if git diff --staged --quiet; then
            echo "No changes to built packages, skipping commit"
          else
            git commit -m "build: update packages for Astro ${{ needs.check-submodule.outputs.astro-version }} (${{ needs.check-submodule.outputs.new-version }})"
            git push origin main
          fi
          
          # Create git tag for the release (but don't commit version changes to package.json)
          git tag "v${{ needs.check-submodule.outputs.new-version }}"
          git push origin "v${{ needs.check-submodule.outputs.new-version }}"

      - name: Create GitHub release
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.check-submodule.outputs.new-version }}
          release_name: Release v${{ needs.check-submodule.outputs.new-version }}
          body: |
            ## Changes
            - Updated to Astro ${{ needs.check-submodule.outputs.astro-version }}
            - Synced with upstream Astro repository
            - Tested with both Node.js and Cloudflare adapters
            
            ## Installation
            ```bash
            npm install zastro-websockets@${{ needs.check-submodule.outputs.new-version }}
            ```
            
            ## Usage
            ```bash
            # Build adapters (generates both Node.js and Cloudflare)
            pnpm run build
            
            # Test adapters
            pnpm run test
            ```
          draft: false
          prerelease: false