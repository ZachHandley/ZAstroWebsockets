name: Auto Build & Publish on Submodule Update

on:
  push:
    branches: [main]
  schedule:
    # Check for submodule updates daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: write
  id-token: write

jobs:
  check-submodule:
    runs-on: ubuntu-latest
    outputs:
      should-publish: ${{ steps.check.outputs.should-publish }}
      astro-version: ${{ steps.check.outputs.astro-version }}
      new-version: ${{ steps.check.outputs.new-version }}
    steps:
      - name: Checkout with submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Check submodule changes and version
        id: check
        run: |
          # Get our repo's latest commit hash
          OUR_COMMIT=$(git rev-parse HEAD | cut -c1-7)
          echo "Our repo commit: $OUR_COMMIT"
          
          # Get Astro version from submodule package.json
          cd astro-upstream
          git fetch --tags
          LATEST_ASTRO_TAG=$(git tag -l "astro@*" | sort -V | tail -1)
          echo "Latest Astro tag: $LATEST_ASTRO_TAG"
          git checkout "$LATEST_ASTRO_TAG"
          ASTRO_VERSION=$(node -p "require('./package.json').version")
          echo "Astro version: $ASTRO_VERSION"
          cd ..
          
          # Generate new version: Astro version + our commit hash
          NEW_VERSION="${ASTRO_VERSION}-${OUR_COMMIT}"
          echo "Proposed new version: $NEW_VERSION"
          
          # Check if tags for this version already exist for both packages
          NODE_TAG_EXISTS=$(git tag --list | grep -q "^node-v${NEW_VERSION}$" && echo "true" || echo "false")
          CLOUDFLARE_TAG_EXISTS=$(git tag --list | grep -q "^cloudflare-v${NEW_VERSION}$" && echo "true" || echo "false")
          
          if [[ "$NODE_TAG_EXISTS" == "true" && "$CLOUDFLARE_TAG_EXISTS" == "true" ]]; then
            echo "Both package versions already exist, skipping publish"
            echo "should-publish=false" >> $GITHUB_OUTPUT
          else
            echo "New version $NEW_VERSION, will publish"
            echo "should-publish=true" >> $GITHUB_OUTPUT
          fi
          
          echo "astro-version=$ASTRO_VERSION" >> $GITHUB_OUTPUT
          echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT

  build-and-publish:
    needs: check-submodule
    if: needs.check-submodule.outputs.should-publish == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout with submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          registry-url: 'https://registry.npmjs.org'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_SECRET }}

      - name: Initialize submodule and update to latest Astro tag
        run: |
          git submodule update --init --recursive
          cd astro-upstream
          git fetch --tags
          # Get the latest astro@* tag and checkout to it
          LATEST_ASTRO_TAG=$(git tag -l "astro@*" | sort -V | tail -1)
          echo "Updating to latest Astro tag: $LATEST_ASTRO_TAG"
          git checkout "$LATEST_ASTRO_TAG"
          cd ..
          # Install dependencies but exclude our generated packages
          pnpm install --ignore-scripts --filter='!zastro-websockets-node' --filter='!zastro-websockets-cloudflare'

      - name: Build and test adapters
        run: |
          echo "Building adapters with dynamic build system..."
          pnpm run build
          
          echo "Testing both adapters..."
          pnpm run test

# Version handling is done in the packages themselves, not root package.json

      - name: Final build
        run: |
          pnpm run build

      - name: Update package versions and get individual versions
        id: versions
        run: |
          # Use sync-version script to update all packages consistently
          npm run sync-version
          
          # Get individual package versions for tagging
          NODE_VERSION=$(node -p "require('./packages/node/package.json').version")
          CLOUDFLARE_VERSION=$(node -p "require('./packages/cloudflare/package.json').version")
          
          echo "Node package version: $NODE_VERSION"
          echo "Cloudflare package version: $CLOUDFLARE_VERSION"
          
          echo "node-version=$NODE_VERSION" >> $GITHUB_OUTPUT
          echo "cloudflare-version=$CLOUDFLARE_VERSION" >> $GITHUB_OUTPUT

      - name: Publish packages to npm
        run: pnpm run publish:packages
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_SECRET }}

      - name: Create release branches and tags for each package
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          NODE_VERSION="${{ steps.versions.outputs.node-version }}"
          CLOUDFLARE_VERSION="${{ steps.versions.outputs.cloudflare-version }}"
          
          # Create release branch for Node.js package
          NODE_BRANCH="releases/node-v$NODE_VERSION"
          git checkout -b "$NODE_BRANCH"
          git add packages/node/
          git commit -m "release: zastro-websockets-node v$NODE_VERSION for Astro ${{ needs.check-submodule.outputs.astro-version }}"
          git push origin "$NODE_BRANCH"
          git tag "node-v$NODE_VERSION"
          git push origin "node-v$NODE_VERSION"
          
          # Switch back to main and create release branch for Cloudflare package
          git checkout main
          CLOUDFLARE_BRANCH="releases/cloudflare-v$CLOUDFLARE_VERSION"
          git checkout -b "$CLOUDFLARE_BRANCH"
          git add packages/cloudflare/
          git commit -m "release: zastro-websockets-cloudflare v$CLOUDFLARE_VERSION for Astro ${{ needs.check-submodule.outputs.astro-version }}"
          git push origin "$CLOUDFLARE_BRANCH"
          git tag "cloudflare-v$CLOUDFLARE_VERSION"
          git push origin "cloudflare-v$CLOUDFLARE_VERSION"

      - name: Create GitHub releases for each package
        run: |
          NODE_VERSION="${{ steps.versions.outputs.node-version }}"
          CLOUDFLARE_VERSION="${{ steps.versions.outputs.cloudflare-version }}"
          
          # Create release for Node.js package
          gh release create "node-v$NODE_VERSION" \
            --title "Node.js Adapter v$NODE_VERSION" \
            --notes "## Changes
          - Updated to Astro ${{ needs.check-submodule.outputs.astro-version }}
          - Synced with upstream Astro repository
          - Tested Node.js adapter functionality
          
          ## Installation
          \`\`\`bash
          npm install zastro-websockets-node@$NODE_VERSION
          \`\`\`" \
            --target "releases/node-v$NODE_VERSION"
          
          # Create release for Cloudflare package
          gh release create "cloudflare-v$CLOUDFLARE_VERSION" \
            --title "Cloudflare Adapter v$CLOUDFLARE_VERSION" \
            --notes "## Changes
          - Updated to Astro ${{ needs.check-submodule.outputs.astro-version }}
          - Synced with upstream Astro repository  
          - Tested Cloudflare adapter functionality
          
          ## Installation
          \`\`\`bash
          npm install zastro-websockets-cloudflare@$CLOUDFLARE_VERSION
          \`\`\`" \
            --target "releases/cloudflare-v$CLOUDFLARE_VERSION"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}